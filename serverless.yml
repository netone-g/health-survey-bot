# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: health-survey
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  # you can overwrite defaults here
  #  stage: dev
  #  region: us-east-1
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-1'}
  timeout: 300

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::${self:provider.environment.S3_BUCKETNAME}/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource:
        - Fn::Join:
            [
              "",
              [
                "arn:aws:dynamodb:",
                { "Ref": "AWS::Region" },
                ":",
                { Ref: "AWS::AccountId" },
                ":table/${self:provider.environment.DYNAMODB_TABLENAME}",
              ],
            ]
  # you can define service wide environment variables here
  environment:
    CiscoTeamsAccessToken: <Webex Teams Botのアクセストークン>
    LOG_LEVEL: INFO
    DYNAMODB_TABLENAME: ${self:service}-${self:provider.stage}
    S3_BUCKETNAME: ${self:service}-${self:provider.stage}
    TZ: "Asia/Tokyo"
    AWS_API_GATEWAY_ROOT_URL:
      {
        "Fn::Join":
          [
            "",
            [
              "https://",
              { "Ref": "ApiGatewayRestApi" },
              ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/",
            ],
          ],
      }

# you can add packaging information here
package:
  individually: true
  exclude:
    - "**"

functions:
  sender:
    handler: sender.lambda_handler
    events:
      # TZ +0900を考慮して-9時間で設定する
      - schedule: cron(0 0 ? * MON,TUE,WED,FRI *)
    package:
      include:
        - sender.py
        - card_settings.json
        - organizations.json

  reciever:
    handler: reciever.lambda_handler
    events:
      - http:
          path: survey
          method: post
    package:
      include:
        - reciever.py

  status:
    handler: status.lambda_handler
    events:
      - http:
          path: check
          method: post
      - schedule: cron(0 3 ? * MON,TUE,WED,FRI *)
    package:
      include:
        - status.py
        - organizations.json
        - card_settings.json

  create_webhook:
    handler: create_webhook.lambda_handler
    package:
      include:
        - create_webhook.py

# you can add CloudFormation resource templates here
resources:
  Resources:
    Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKETNAME}
    Table:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLENAME}
        AttributeDefinitions:
          - AttributeName: PersonEmail
            AttributeType: S
        KeySchema:
          - AttributeName: PersonEmail
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
